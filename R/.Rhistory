chord_pred
gene_statuses_brca
gene_statuses_brca$sample
unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[colnames(chord_pred) == i, 'hrd']
}))
unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[rownames(chord_pred) == i, 'hrd']
}))
gene_statuses_brca$hrd <- unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[rownames(chord_pred) == i, 'hrd']
}))
#========= Compare variant annotation pipelines (Luan vs. Arne) =========#
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>% .[order(.$is_def, decreasing=T),]
gene_statuses_brca$hrd <- unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[rownames(chord_pred) == i, 'hrd']
}))
def_samples  <- list(
luan = gene_statuses_brca %>% .[.$is_def == T,'sample'] %>% unique(),
arne = chord_pred %>% .[.$response_simple == 1,] %>% rownames() %>% .[. != "NA"]
)
union_def_samples <- unique(unlist(def_samples))
def_samples_compare <- lapply(union_def_samples, function(i){
#i='CPCT02010846T'
data.frame(
is_def_luan = i %in% def_samples$luan,
is_def_arne = i %in% def_samples$arne,
hrd = chord_pred %>% .[rownames(.) == i, 'hrd'],
response = chord_pred %>% .[rownames(.) == i, 'response']
)
}) %>% do.call(rbind,.)
rownames(def_samples_compare) <- union_def_samples
def_samples_compare <- def_samples_compare %>% .[order(.$hrd, decreasing=T),]
## False positives
subset(def_patients_compare, is_def_luan == T & is_def_arne == F & hrd < 0.5)
gene_statuses_brca %>% .[.$sample == 'CPCT02300009T',] ##
## False positives
subset(def_patients_compare, is_def_luan == T & is_def_arne == F & hrd < 0.5)
gene_statuses_brca %>% .[.$sample == 'CPCT02040280T',] ## Correct based on snpeff; frameshift
gene_statuses_brca %>% .[.$sample == 'CPCT02020680T',] ## Correct based on clinvar; Pathogenic
## Fill in empty gene names
if(verbose){ message('Filling in empty gene names...') }
if(nrow(cnv) != 0){
for(i in 1:nrow(cnv)){
if(nchar(cnv$Gene[i]) == 0){
cnv$Gene[i] <- getVarGene(cnv$Chromosome[i], cnv$Start[i], cnv$End[i])
}
}
}
if(nrow(germ) != 0){
for(i in 1:nrow(germ)){
if(nchar(germ$snpeff_gene[i]) == 0){
germ$snpeff_gene[i] <- getVarGene(germ$chrom[i], germ$pos[i])
}
}
}
if(nrow(som) != 0){
for(i in 1:nrow(som)){
if(nchar(som$snpeff_gene[i]) != 0){
som$snpeff_gene[i] <- getVarGene(som$chrom[i], som$pos[i])
}
}
}
#--------- Calculate variant scores ---------#
## Initiate main data structure
gene_mut_profile <- list()
## Calculate scores
if(verbose){ message('Calculating CNV scores...') }
gene_mut_profile$cnv <- calcCnvScores(cnv$Gene, cnv$MinCopyNumber, cnv$MaxCopyNumber,
cnv$MinMinorAllelePloidy, show.raw = T)
if(verbose){ message('Calculating germline/somatic mutation scores...') }
## Wrapper function for calcSnvIndelScores() and calcAdjTumorAd()
makeGeneMutProfileGermSom <- function(df, mode){
#df=som
cbind(
gene = df$snpeff_gene,
var_start = if(nrow(df) > 0){ paste0(df$chrom,':',df$pos) } else { character(0) },
calcSnvIndelScores(df$snpeff_eff, df$clinvar_sig, df$enigma_sig, show.raw=T),
calcAdjTumorAd(df$tumor_ad_ref, df$tumor_ad_alt, tumor_purity, mode = mode)
)
}
gene_mut_profile$germ <- makeGeneMutProfileGermSom(germ, mode = 'germline')
gene_mut_profile$som <- makeGeneMutProfileGermSom(som, mode = 'somatic')
calcSnvIndelScores(som$snpeff_eff, som$clinvar_sig, som$enigma_sig, show.raw=T)
calcAdjTumorAd(som$tumor_ad_ref, som$tumor_ad_alt, tumor_purity, mode = 'somatic')
#--------- Germline and somatic post processing ---------#
getGeneMaxEff <- function(df){
#df=gene_mut_profile$som
if(nrow(df) == 0){ out <- NA }
else{
genes <- unique(df$gene)
out <- do.call(rbind, lapply(genes, function(i){
#i="BRE"
## greedily determine variant with max score for each gene
df_ss <- df[ df$gene == i,]
df_ss[which.max(df_ss$max_score),]
}))
}
return(out)
}
if(verbose){ message('Filtering germline/somatic mutation scores...') }
gene_mut_profile$germ <- getGeneMaxEff(gene_mut_profile$germ)
gene_mut_profile$som <- getGeneMaxEff(gene_mut_profile$som)
## Export raw processed variant data
if(verbose){ message('Exporting raw mutation profile...') }
if(export.prelim.data){
write.tsv <- function(...){ write.table(..., sep='\t',quote=F,row.names=F) }
write.tsv(gene_mut_profile$cnv, paste0(output.dir,'/mut_profile_cnv.txt'))
write.tsv(gene_mut_profile$germ, paste0(output.dir,'/mut_profile_germ.txt'))
write.tsv(gene_mut_profile$som, paste0(output.dir,'/mut_profile_som.txt'))
}
#--------- Determine gene deficiencies ---------#
if(verbose){ message('Consolidating mutations...') }
union_genes <- unlist(lapply(gene_mut_profile, function(i){
if( is.data.frame(i) ){ i$gene }
else { NA }
}), use.names = F)
union_genes <- union_genes[!is.na(union_genes)] ## rm unknown genes and empty dataframes
union_genes <- unique(sort(union_genes))
## Cols to select from gene_mut_profile
cols <- list(
cnv = c('full_gene_loss','loh','cn_break_in_gene'),
germ = c('var_start','max_score','adj_tumor_ad_ref','adj_tumor_ad_alt'),
som  = c('var_start','max_score','adj_tumor_ad_ref','adj_tumor_ad_alt') ## duplicated for easy lapply iteration
)
gene_statuses <- lapply(c('cnv','germ','som'), function(i){
#i='cnv'
#i='som'
## For df in gene_mut_profile with no variants, create df of NAs for errorless cbind
if(!is.data.frame(gene_mut_profile[[i]])){
df <- data.frame(matrix( nrow=length(union_genes), ncol=length(cols[[i]]) ))
colnames(df) <- cols[[i]]
} else {
df <- do.call(rbind, lapply(union_genes, function(j){
#j=union_genes[79]
df_temp <- gene_mut_profile[[i]] %>% .[.$gene == j, cols[[i]] ]
## If gene not in gene_mut_profile df, create df of NAs for errorless rbind (inner loop)
if(nrow(df_temp) == 0){ df_temp[1,] <- rep(NA, length(cols[[i]])) }
return(df_temp)
}))
}
return(df)
})
names(gene_statuses) <- c('','germ','som') ## Empty name for CNV results in no prefix with do.call(cbind, ...)
gene_statuses <- do.call(cbind, gene_statuses)
gene_statuses <- cbind(gene = union_genes, gene_statuses)
#--------- For LOH+germ, check if LOH affected the ref or alt allele based on AD ---------#
## If alt allele is lost, gene is still fine.
if(verbose){ message('Transforming germline adjusted tumor AD values...') }
germ_ref_loss <- do.call(rbind, lapply(1:nrow(gene_statuses),function(i){
#i=6
#cat('\r',i)
r <- gene_statuses[i,]
## Calculate germ.ad_diff_score:
## alt/ref ratio, taking into account where: ref = 0, ref < 0, and alt < 0
if(is.na(r$germ.adj_tumor_ad_ref) || is.na(r$germ.adj_tumor_ad_alt)
|| r$germ.adj_tumor_ad_alt <= 0
){
germ.ad_diff_score <- 0
} else if(r$germ.adj_tumor_ad_ref < 0){
## alt/ref makes no sense when ref is negative.
## Set ref to 0: returns Inf or NaN
germ.ad_diff_score <- r$germ.adj_tumor_ad_alt/0
} else {
germ.ad_diff_score <- r$germ.adj_tumor_ad_alt/r$germ.adj_tumor_ad_ref
}
germ.ad_diff_score[is.na(germ.ad_diff_score)] <- 0 ## Set NaN scores to 0
if(germ.ad_diff_score >= min.germ.ad.diff.score
& !is.na(r$germ.adj_tumor_ad_alt) && r$germ.adj_tumor_ad_alt >= min.germ.adj.tumor.ad.alt
){
germ.ref_loss <- TRUE
} else {
germ.ref_loss <- FALSE
}
return(data.frame(
germ.ad_diff_score = round(germ.ad_diff_score, 3),
germ.ref_loss
))
}))
gene_statuses <- cbind(gene_statuses,germ_ref_loss)
gene_statuses
#--------- For LOH+som, adjust alt AD should not be low ---------#
gene_statuses$som.alt_exists <- gene_statuses$som.adj_tumor_ad_alt >= min.som.adj.tumor.ad.alt
gene_statuses$som.alt_exists[is.na(gene_statuses$som.alt_exists)] <- FALSE
#--------- Final decision tree ---------#
if(verbose){ message('Determining deficient genes...') }
def_status <- do.call(rbind,lapply(1:nrow(gene_statuses), function(i){
#i=10
r <- gene_statuses[i,]
## Gene is proficient by default
is_def <- FALSE
hit_type <- 'none'
## Decision tree to test deficiency
if(!is.na(r$full_gene_loss) && r$full_gene_loss == 10){
is_def <- TRUE
hit_type <- 'full_gene_loss'
} else {
sums <- data.frame(
loh_germ = r$loh + r$germ.max_score,
loh_som = r$loh + r$som.max_score,
germ_som = r$germ.max_score + r$som.max_score
)
sums[is.na(sums)] <- 0
if(sums$loh_som == 10) {
hit_type <- 'loh+som'
is_def <- TRUE
}
else if(sums$loh_germ == 10 & r$germ.ref_loss == T){
hit_type <- 'loh+germ'
is_def <- TRUE
}
## If germ + som mutation is accepted as gene deficiency condition, germ + som must == 10
else if(sums$germ_som == 10 &r$som.alt_exists == T){
if(germ.som.mut.is.def){ is_def <- TRUE }
hit_type <- 'germ+som'
}
}
return(data.frame(is_def,hit_type))
}))
gene_statuses <- cbind(gene_statuses,def_status)
gene_statuses
gene_statuses[,c(
## Main
"gene","is_def","hit_type",
## CNV
"min.copy.number","max.copy.number","min.minor.allele.ploidy","full_gene_loss","loh","cn_break_in_gene",
## Germline
"germ.var_start","germ.max_score","germ.ref_loss","germ.adj_tumor_ad_ref","germ.adj_tumor_ad_alt",
## Somatic
"som.var_start","som.max_score","som.alt_exists","som.adj_tumor_ad_ref","som.adj_tumor_ad_alt"
)]
#--------- Export ---------#
## Reorder columns for better readability
gene_statuses <- gene_statuses[,c(
## Main
"gene","is_def","hit_type",
## CNV
"min.copy.number","max.copy.number","min.minor.allele.ploidy","full_gene_loss","loh","cn_break_in_gene",
## Germline
"germ.var_start","germ.max_score","germ.ref_loss","germ.adj_tumor_ad_ref","germ.adj_tumor_ad_alt",
## Somatic
"som.var_start","som.max_score","som.alt_exists","som.adj_tumor_ad_ref","som.adj_tumor_ad_alt"
)]
#--------- Export ---------#
## Reorder columns for better readability
gene_statuses[,c(
## Main
"gene","is_def","hit_type"#,
# ## CNV
# "min.copy.number","max.copy.number","min.minor.allele.ploidy","full_gene_loss","loh","cn_break_in_gene",
#
# ## Germline
# "germ.var_start","germ.max_score","germ.ref_loss","germ.adj_tumor_ad_ref","germ.adj_tumor_ad_alt",
#
# ## Somatic
# "som.var_start","som.max_score","som.alt_exists","som.adj_tumor_ad_ref","som.adj_tumor_ad_alt"
)]
#--------- Export ---------#
## Reorder columns for better readability
gene_statuses[,c(
## Main
"gene","is_def","hit_type",
## CNV
"min.copy.number","max.copy.number","min.minor.allele.ploidy","full_gene_loss","loh","cn_break_in_gene"#,
#
# ## Germline
# "germ.var_start","germ.max_score","germ.ref_loss","germ.adj_tumor_ad_ref","germ.adj_tumor_ad_alt",
#
# ## Somatic
# "som.var_start","som.max_score","som.alt_exists","som.adj_tumor_ad_ref","som.adj_tumor_ad_alt"
)]
gene_statuses
gene_mut_profile$cnv
## Cols to select from gene_mut_profile
cols <- list(
cnv = c('min.copy.number','max.copy.number','min.minor.allele.ploidy',
'full_gene_loss','loh','cn_break_in_gene'),
germ = c('var_start','max_score','adj_tumor_ad_ref','adj_tumor_ad_alt'),
som  = c('var_start','max_score','adj_tumor_ad_ref','adj_tumor_ad_alt') ## duplicated for easy lapply iteration
)
gene_statuses <- lapply(c('cnv','germ','som'), function(i){
#i='cnv'
#i='som'
## For df in gene_mut_profile with no variants, create df of NAs for errorless cbind
if(!is.data.frame(gene_mut_profile[[i]])){
df <- data.frame(matrix( nrow=length(union_genes), ncol=length(cols[[i]]) ))
colnames(df) <- cols[[i]]
} else {
df <- do.call(rbind, lapply(union_genes, function(j){
#j=union_genes[79]
df_temp <- gene_mut_profile[[i]] %>% .[.$gene == j, cols[[i]] ]
## If gene not in gene_mut_profile df, create df of NAs for errorless rbind (inner loop)
if(nrow(df_temp) == 0){ df_temp[1,] <- rep(NA, length(cols[[i]])) }
return(df_temp)
}))
}
return(df)
})
names(gene_statuses) <- c('','germ','som') ## Empty name for CNV results in no prefix with do.call(cbind, ...)
gene_statuses <- do.call(cbind, gene_statuses)
gene_statuses <- cbind(gene = union_genes, gene_statuses)
gene_statuses
gene_statuses <- lapply(c('cnv','germ','som'), function(i){
#i='cnv'
#i='som'
## For df in gene_mut_profile with no variants, create df of NAs for errorless cbind
if(!is.data.frame(gene_mut_profile[[i]])){
df <- data.frame(matrix( nrow=length(union_genes), ncol=length(cols[[i]]) ))
colnames(df) <- cols[[i]]
} else {
df <- do.call(rbind, lapply(union_genes, function(j){
#j=union_genes[79]
df_temp <- gene_mut_profile[[i]] %>% .[.$gene == j, cols[[i]] ]
## If gene not in gene_mut_profile df, create df of NAs for errorless rbind (inner loop)
if(nrow(df_temp) == 0){ df_temp[1,] <- rep(NA, length(cols[[i]])) }
return(df_temp)
}))
}
return(df)
})
names(gene_statuses) <- c('','germ','som') ## Empty name for CNV results in no prefix with do.call(cbind, ...)
gene_statuses <- do.call(cbind, gene_statuses)
gene_statuses <- cbind(gene = union_genes, gene_statuses)
#--------- For LOH+germ, check if LOH affected the ref or alt allele based on AD ---------#
## If alt allele is lost, gene is still fine.
if(verbose){ message('Transforming germline adjusted tumor AD values...') }
germ_ref_loss <- do.call(rbind, lapply(1:nrow(gene_statuses),function(i){
#i=6
#cat('\r',i)
r <- gene_statuses[i,]
## Calculate germ.ad_diff_score:
## alt/ref ratio, taking into account where: ref = 0, ref < 0, and alt < 0
if(is.na(r$germ.adj_tumor_ad_ref) || is.na(r$germ.adj_tumor_ad_alt)
|| r$germ.adj_tumor_ad_alt <= 0
){
germ.ad_diff_score <- 0
} else if(r$germ.adj_tumor_ad_ref < 0){
## alt/ref makes no sense when ref is negative.
## Set ref to 0: returns Inf or NaN
germ.ad_diff_score <- r$germ.adj_tumor_ad_alt/0
} else {
germ.ad_diff_score <- r$germ.adj_tumor_ad_alt/r$germ.adj_tumor_ad_ref
}
germ.ad_diff_score[is.na(germ.ad_diff_score)] <- 0 ## Set NaN scores to 0
if(germ.ad_diff_score >= min.germ.ad.diff.score
& !is.na(r$germ.adj_tumor_ad_alt) && r$germ.adj_tumor_ad_alt >= min.germ.adj.tumor.ad.alt
){
germ.ref_loss <- TRUE
} else {
germ.ref_loss <- FALSE
}
return(data.frame(
germ.ad_diff_score = round(germ.ad_diff_score, 3),
germ.ref_loss
))
}))
gene_statuses <- cbind(gene_statuses,germ_ref_loss)
#--------- For LOH+som, adjust alt AD should not be low ---------#
gene_statuses$som.alt_exists <- gene_statuses$som.adj_tumor_ad_alt >= min.som.adj.tumor.ad.alt
gene_statuses$som.alt_exists[is.na(gene_statuses$som.alt_exists)] <- FALSE
#--------- Final decision tree ---------#
if(verbose){ message('Determining deficient genes...') }
def_status <- do.call(rbind,lapply(1:nrow(gene_statuses), function(i){
#i=10
r <- gene_statuses[i,]
## Gene is proficient by default
is_def <- FALSE
hit_type <- 'none'
## Decision tree to test deficiency
if(!is.na(r$full_gene_loss) && r$full_gene_loss == 10){
is_def <- TRUE
hit_type <- 'full_gene_loss'
} else {
sums <- data.frame(
loh_germ = r$loh + r$germ.max_score,
loh_som = r$loh + r$som.max_score,
germ_som = r$germ.max_score + r$som.max_score
)
sums[is.na(sums)] <- 0
if(sums$loh_som == 10) {
hit_type <- 'loh+som'
is_def <- TRUE
}
else if(sums$loh_germ == 10 & r$germ.ref_loss == T){
hit_type <- 'loh+germ'
is_def <- TRUE
}
## If germ + som mutation is accepted as gene deficiency condition, germ + som must == 10
else if(sums$germ_som == 10 &r$som.alt_exists == T){
if(germ.som.mut.is.def){ is_def <- TRUE }
hit_type <- 'germ+som'
}
}
return(data.frame(is_def,hit_type))
}))
gene_statuses <- cbind(gene_statuses,def_status)
#--------- Export ---------#
## Reorder columns for better readability
gene_statuses[,c(
## Main
"gene","is_def","hit_type",
## CNV
"min.copy.number","max.copy.number","min.minor.allele.ploidy","full_gene_loss","loh","cn_break_in_gene",
## Germline
"germ.var_start","germ.max_score","germ.ref_loss","germ.adj_tumor_ad_ref","germ.adj_tumor_ad_alt",
## Somatic
"som.var_start","som.max_score","som.alt_exists","som.adj_tumor_ad_ref","som.adj_tumor_ad_alt"
)]
#--------- Export ---------#
## Reorder columns for better readability
gene_statuses <- gene_statuses[,c(
## Main
"gene","is_def","hit_type",
## CNV
"min.copy.number","max.copy.number","min.minor.allele.ploidy","full_gene_loss","loh","cn_break_in_gene",
## Germline
"germ.var_start","germ.max_score","germ.ref_loss","germ.adj_tumor_ad_ref","germ.adj_tumor_ad_alt",
## Somatic
"som.var_start","som.max_score","som.alt_exists","som.adj_tumor_ad_ref","som.adj_tumor_ad_alt"
)]
gene_statuses
gene_statuses_brca
gene_statuses_brca %>% .[.$is_def == F & .$hrd >= 0.5,]
gene_statuses_brca <- data.frame()
gene_statuses_brca$hrd <- unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[rownames(chord_pred) == i, 'hrd']
}))
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),] %>%
cbind(gene_statuses_brca, .)
gene_statuses_brca <- data.frame()
gene_statuses_brca$hrd <- unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[rownames(chord_pred) == i, 'hrd']
}))
gene_statuses_brca
#========= Compare variant annotation pipelines (Luan vs. Arne) =========#
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),] %>%
cbind(gene_statuses_brca, .)
gene_statuses_brca
#--------- Load merged ---------#
gene_statuses <- read.table(paste0(out_path,'/hmf_gene_statuses.txt'),sep='\t',header=T)
gene_statuses_brca <- data.frame()
gene_statuses_brca$hrd <- unlist(lapply(gene_statuses_brca$sample, function(i){
chord_pred[rownames(chord_pred) == i, 'hrd']
}))
gene_statuses_brca
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),] %>%
cbind(gene_statuses_brca, .)
gene_statuses_brca <- data.frame()
gene_statuses_brca
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),]
gene_statuses_brca
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),]
gene_statuses_brca <- cbind(
unlist(lapply(gene_statuses_brca$sample, function(i){chord_pred[rownames(chord_pred) == i, 'hrd'] })),
gene_statuses_brca
)
gene_statuses_brca
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),]
gene_statuses_brca <- cbind(
hrd = unlist(lapply(gene_statuses_brca$sample, function(i){chord_pred[rownames(chord_pred) == i, 'hrd'] })),
gene_statuses_brca
)
## Merge tables
counter <- 0
n_files <- length(files)
gene_statuses <- lapply(seq_along(files), function(i){
counter <<- counter + 1
cat('\r','Loading file:',counter,'/',n_files); flush.console()
df <- read.table(files[i],sep='\t',header=T)
df <- cbind(sample = sample_names[i], df)
return(df)
}); gene_statuses <- do.call(rbind, gene_statuses)
## Export merged table
write.tsv(gene_statuses, paste0(out_path,'/hmf_gene_statuses.txt'))
#--------- Load merged ---------#
gene_statuses <- read.table(paste0(out_path,'/hmf_gene_statuses.txt'),sep='\t',header=T)
#========= Compare variant annotation pipelines (Luan vs. Arne) =========#
gene_statuses_brca <- subset(gene_statuses, gene %in% c("BRCA1","BRCA2")) %>%
.[order(.$is_def, decreasing=T),]
## bind chord scores
gene_statuses_brca <- cbind(
hrd = unlist(lapply(gene_statuses_brca$sample, function(i){chord_pred[rownames(chord_pred) == i, 'hrd'] })),
gene_statuses_brca
)
def_samples  <- list(
luan = gene_statuses_brca %>% .[.$is_def == T,'sample'] %>% unique(),
arne = chord_pred %>% .[.$response_simple == 1,] %>% rownames() %>% .[. != "NA"]
)
union_def_samples <- unique(unlist(def_samples))
def_samples_compare <- lapply(union_def_samples, function(i){
#i='CPCT02010846T'
data.frame(
is_def_luan = i %in% def_samples$luan,
is_def_arne = i %in% def_samples$arne,
hrd = chord_pred %>% .[rownames(.) == i, 'hrd'],
response = chord_pred %>% .[rownames(.) == i, 'response']
)
}) %>% do.call(rbind,.)
rownames(def_samples_compare) <- union_def_samples
def_samples_compare <- def_samples_compare %>% .[order(.$hrd, decreasing=T),]
gene_statuses_brca
gene_statuses_brca %>% .[.$is_def == F & .$hrd >= 0.5,]
gene_statuses_brca %>% .[.$is_def == F & .$hrd >= 0.5 & (.$germ.max_score == 4 | .$som.max_score == 4),]
gene_statuses_brca %>% .[.$is_def == F & .$hrd >= 0.5
& ((!is.na(.$germ.max_score) & .$germ.max_score == 4)
| (!is.na(.$som.max_score) & .$som.max_score == 4)),]
